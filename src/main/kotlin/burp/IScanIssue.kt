package burp

/*
 * @(#)IScanIssue.java
 *
 * Copyright PortSwigger Ltd. All rights reserved.
 *
 * This code may be used to extend the functionality of Burp Suite Free Edition
 * and Burp Suite Professional, provided that this usage does not violate the
 * license terms for those products.
 */
/**
 * This interface is used to retrieve details of Scanner issues. Extensions can
 * obtain details of issues by registering an `IScannerListener` or
 * by calling `IBurpExtenderCallbacks.getScanIssues()`. Extensions
 * can also add custom Scanner issues by registering an
 * `IScannerCheck` or calling
 * `IBurpExtenderCallbacks.addScanIssue()`, and providing their own
 * implementations of this interface. Note that issue descriptions and other
 * text generated by extensions are subject to an HTML whitelist that allows
 * only formatting tags and simple hyperlinks.
 */
interface IScanIssue {

    /**
     * This method returns the URL for which the issue was generated.
     *
     * @return The URL for which the issue was generated.
     */
    val url: java.net.URL

    /**
     * This method returns the name of the issue type.
     *
     * @return The name of the issue type (e.g. "SQL injection").
     */
    val issueName: String

    /**
     * This method returns a numeric identifier of the issue type. See the Burp
     * Scanner help documentation for a listing of all the issue types.
     *
     * @return A numeric identifier of the issue type.
     */
    val issueType: Int

    /**
     * This method returns the issue severity level.
     *
     * @return The issue severity level. Expected values are "High", "Medium",
     * "Low", "Information" or "False positive".
     */
    val severity: String

    /**
     * This method returns the issue confidence level.
     *
     * @return The issue confidence level. Expected values are "Certain", "Firm"
     * or "Tentative".
     */
    val confidence: String

    /**
     * This method returns a background description for this type of issue.
     *
     * @return A background description for this type of issue, or
     * `null` if none applies. A limited set of HTML tags may be
     * used.
     */
    val issueBackground: String?

    /**
     * This method returns a background description of the remediation for this
     * type of issue.
     *
     * @return A background description of the remediation for this type of
     * issue, or `null` if none applies. A limited set of HTML tags
     * may be used.
     */
    val remediationBackground: String?

    /**
     * This method returns detailed information about this specific instance of
     * the issue.
     *
     * @return Detailed information about this specific instance of the issue,
     * or `null` if none applies. A limited set of HTML tags may be
     * used.
     */
    val issueDetail: String?

    /**
     * This method returns detailed information about the remediation for this
     * specific instance of the issue.
     *
     * @return Detailed information about the remediation for this specific
     * instance of the issue, or `null` if none applies. A limited
     * set of HTML tags may be used.
     */
    val remediationDetail: String?

    /**
     * This method returns the HTTP messages on the basis of which the issue was
     * generated.
     *
     * @return The HTTP messages on the basis of which the issue was generated.
     * **Note:** The items in this array should be instances of
     * `IHttpRequestResponseWithMarkers` if applicable, so that
     * details of the relevant portions of the request and response messages are
     * available.
     */
    val httpMessages: Array<IHttpRequestResponse>

    /**
     * This method returns the HTTP service for which the issue was generated.
     *
     * @return The HTTP service for which the issue was generated.
     */
    val httpService: IHttpService

}
